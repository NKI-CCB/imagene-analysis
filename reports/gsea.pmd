---
title: Gene Set Enrichment Analysis of CAD features
author: Tycho Bismeijer
date: 2017-06-06
---

## Setup ## {.collapsed}

Load libraries.

```{python import_libs}
from IPython.display import display, Markdown
import numpy as np
import pandas as pd
from tabulate import tabulate
import xarray as xr

import plot
```

Setup style of plots.

```{python setup-matplotlib}
import matplotlib
matplotlib.rcParams['font.family'] = 'sans-serif'
matplotlib.rcParams['font.sans-serif'] = ['Alegreya Sans']
matplotlib.rcParams['font.weight'] = 'regular'
matplotlib.rcParams['figure.dpi'] = 300
```

A utility function to display tables with [DataTables](https://datatables.net).

```{python util_funcs}
def display_table(t):
    display(Markdown(
        '<div class="datatable">' +
        tabulate(t, headers='keys') +
        "\n\n</div>"
    ))
```

Load gene set enrichment analysis (GSEA) results on the MsigDB Hallmarks set.

```{python load-gsea}
def load_gsea_ds(fn):
    ds = xr.open_dataset(fn).load()
    ds['mri_feature'] = [s.decode() for s in ds['mri_feature'].values]
    ds['mri_feature'] = [" ".join(s.split('_')).title()
                         for s in ds['mri_feature'].values]
    ds['gene_set_code'] = ('gene_set',
                           [s.decode() for s in ds['gene_set'].values])
    ds['gene_set'] = [" ".join(s.split('_')).title()
                      for s in ds['gene_set_code'].values]
    return ds
df_h = load_gsea_ds("../analyses/gsea/mri-features_h.all_T.nc")
df_h_rv = load_gsea_ds("../analyses/gsea/mri-features-reg-volume_h.all_T.nc")
```

A function to plot a heatmap with normalized enrichment statistics (NES) that
are significant.

```{python es-heatmap-fun}
def plot_ds(ds, fdr, le_prop=0.0):
    ds = ds.copy()
    ds['significance_mask'] = (ds['fdr'] > fdr) | (ds['le_prop'] < le_prop)
    ds = ds.sel(
        gene_set=np.logical_not(ds['significance_mask'])
                 .sum('mri_feature') > 0,
    )
    with plot.subplots(1, 1, figsize=(8, 5.5)) as (fig, ax):
        plot.heatmap(
            ds['nes'], mask=ds['significance_mask'],
            zlim=[0, np.max(ds['nes'])], cmap='viridis',
            ax=ax,
        )
        ax.set_xticklabels(ax.get_xticklabels(), rotation=90)
```

A function to show significant pathway enrichments in a table.

```{python es-table-fun}
def table_ds(ds, fdr, le_prop=0.0):
    df = ds.to_dataframe()
    df.reset_index(level=0, inplace=True)
    display_table(df.loc[(df['fdr'] < fdr) & (df['le_prop'] > le_prop)])
```

## Results ##

Hallmarks from MSigDB.

```{python hallmarks-es-plot}
plot_ds(df_h, fdr=0.25)
```

```{python hallmarks-table}
table_ds(df_h, fdr=0.25)
```

## Results---Volume regressed out ##

Hallmarks from MSigDB.

```{python hallmarks-es-plot-rv}
plot_ds(df_h_rv, fdr=0.25)
```

```{python hallmarks-table-rv}
table_ds(df_h_rv, fdr=0.25)
```
