---
title: Gene Set Enrichment Analysis of CAD features
author: Tycho Bismeijer
date: 2017-06-06
---

## Setup ## {.collapsed}

Load libraries.

```{python import_libs}
from IPython.display import display, Markdown
import numpy as np
import pandas as pd
from tabulate import tabulate
import xarray as xr

import plot
```

Setup style of plots.

```{python setup-matplotlib, source="src/reports/setup-matplotlib.py"}
```

Load gene set enrichment analysis (GSEA) results on the MsigDB Hallmarks set.

```{python load-gsea-fun, source="src/reports/load-gsea-fun.py"}
```

```{python load-gsea}
df_h = load_gsea_ds("../analyses/gsea/mri-features-all_h.all_T.nc")
df_cgp = load_gsea_ds("../analyses/gsea/mri-features-all_c2.cgp_F.nc")
df_cp = load_gsea_ds("../analyses/gsea/mri-features-all_c2.cp_T.nc")
```

```{python load-differential-expression}
de = xr.open_dataset("../analyses/de/mri-features-all.nc")
```

A function to plot a heatmap with normalized enrichment statistics (NES) that
are significant.

```{python es-heatmap-fun, source="src/reports/es-heatmap-fun.py"}
```

A utility function to display tables with [DataTables](https://datatables.net).
And a function to show significant pathway enrichments in a table.

```{python es-table-fun, source="src/reports/es-table-fun.py"}
```


## Results ##


## Hallmarks ##

Hallmarks from MSigDB.

```{python hallmarks-es-plot}
plot_ds(df_h, fdr=0.25)
```

```{python hallmarks-table}
table_ds(df_h, fdr=0.25)
```

## Gene Signatures ##

Gene signatures (c2.cgp) from MSigDB.

```{python cgp-es-plot}
plot_ds(df_cgp, fdr=0.25, abs=False)
```

```{python cgp-table}
table_ds(df_cgp, fdr=0.25)
```

## Pathways ##

Pathways (c2.cp) from MSigDB.

```{python cp-es-plot}
plot_ds(df_cp, fdr=0.25)
```

```{python cp-table}
table_ds(df_cp, fdr=0.25)
```

### Differential Expression ###

```{python de}
for mri_idx in range(de.dims['mri_feature']):
    mri_f = de['mri_feature'][mri_idx].values.item().decode()
    gene_rank = de['t'][mri_idx, :].argsort()
    sel_genes = list(gene_rank[0:250]) + list(gene_rank[-250:])

    df = pd.DataFrame({
        "coefficient": de['coefficient'][mri_idx, sel_genes].to_pandas(),
        "t": de['t'][mri_idx, sel_genes].to_pandas(),
        "gene symbol": de['hgnc_symbol'][sel_genes],
    })
    df.name = mri_f
    display(Markdown(f"*{mri_f}*"))
    display_table(df)
```
