---
title: Exploration to remove size from MRI CAD features
author: Tycho Bismeijer
date: 2017-07-03
---

## Setup ## {.collapsed}

Load libraries.

```{python import_libs}
from math import sqrt, ceil

import factor_rotation
from IPython.display import display, Markdown
import numpy as np
import scipy.stats
import sklearn.decomposition
import xarray as xr

import plot
```

Setup style of plots.

```{python setup-matplotlib}
import matplotlib
matplotlib.rcParams['font.family'] = 'sans-serif'
matplotlib.rcParams['font.sans-serif'] = ['Alegreya Sans']
matplotlib.rcParams['font.weight'] = 'regular'
matplotlib.rcParams['figure.dpi'] = 300
```

```{python load-mri}
mri_ds = xr.open_dataset('../data/processed/mri-features.nc')
del mri_ds['Comment']
del mri_ds['MultiFocal']
mri = mri_ds.to_array('cad_feature', 'mri_cad_features')
mri_ds.close()
mri = mri.isel(case=np.where(mri.isnull().sum('cad_feature') == 0)[0])
mri = mri.transpose('case', 'cad_feature')
print(mri)
```

## Only linear scale adjustment ##

### PCA ###

```{python fit-pca}
pca = sklearn.decomposition.PCA()
pca.fit((mri / mri.std('case')).values)
```

```{python pca-ev}
total_var = np.sum(pca.explained_variance_)
with plot.subplots(3, 1, sharex=True) as (fig, axs):
    axs[0].plot(
        range(1, len(pca.explained_variance_)+1),
        np.cumsum(pca.explained_variance_) / total_var
    )
    axs[0].set_ylabel("Total\nExplained Variance")
    axs[1].plot(
        range(1, len(pca.explained_variance_)+1),
        pca.explained_variance_ / total_var
    )
    axs[1].set_ylabel("Explained Variance")
    axs[2].plot(
        range(2, len(pca.explained_variance_)+1),
        abs(pca.explained_variance_[1:] - pca.explained_variance_[:-1]) /
        total_var,
    )
    axs[2].set_xlabel("PC")
    axs[2].set_ylabel("Delta\nExplained Variance")
n_components = 11
```

```{python heatmap-pca}
plot.heatmap(
    pca.components_[:n_components, :].T,
    xticklabels=[str(i+1) for i in range(n_components)],
    yticklabels=mri.cad_feature.values,
)
```

```{python plot-pca-a}
with plot.subplots(1, 1, figsize=(7, 7)) as (fig, ax):
    ax.set_xlim(-1, 1)
    ax.set_ylim(-1, 1)
    for i in range(pca.components_.shape[1]):
        ax.arrow(0, 0, pca.components_[0, i], pca.components_[1, i])
        alength = sqrt(pca.components_[0, i]**2 + pca.components_[1, i]**2)
        if alength > 0.25:
            ax.text(pca.components_[0, i], pca.components_[1, i],
                    mri['cad_feature'].values[i])
```

### Normal QQ-plots of MRI CAD features ###

```{python qqplot-mri-features, evaluate=True}
nf = len(mri['cad_feature'])
nc = len(mri['case'])
n_row = ceil(nf / 3)
n_col = 3
fs = (n_col*3, n_row*3)
with plot.subplots(n_row, n_col, figsize=fs) as (fig, axs):
    norm = scipy.stats.norm(0, 1)
    q_norm = norm.ppf(np.linspace(1 / nc, 1 - (1 / nc), nc))
    for i in range(nf):
        row, col = divmod(i, n_col)
        q_feature = mri.isel(cad_feature=i).values
        plot.qqplot(
            q_norm, q_feature,
            ax=axs[row, col],
            xlabel='Normal Q',
            ylabel=str(mri['cad_feature'].values[i]) + " Q",
            title=""
        )
    fig.tight_layout()
```

## Adjusted Scale ##

```{python adjust-mri-features}
mri_adj = xr.DataArray(np.full(mri.shape, np.nan), mri.coords, mri.dims)
for feature in mri['cad_feature'].values:
    if feature[0:3] == 'vol':
        mri_adj.loc[:, feature] = np.cbrt(mri.loc[:, feature])
    elif feature[0:3] == 'var':
        mri_adj.loc[:, feature] = np.sqrt(mri.loc[:, feature])
    else:
        mri_adj.loc[:, feature] = mri.loc[:, feature]
mri_adj
```

### Normal QQ-plots of MRI CAD features ###

```{python qqplot-mri-features-adj, evaluate=True}
nf = len(mri_adj['cad_feature'])
nc = len(mri_adj['case'])
n_row = ceil(nf / 3)
n_col = 3
fs = (n_col*3, n_row*3)
with plot.subplots(n_row, n_col, figsize=fs) as (fig, axs):
    norm = scipy.stats.norm(0, 1)
    q_norm = norm.ppf(np.linspace(1 / nc, 1 - (1 / nc), nc))
    for i in range(nf):
        row, col = divmod(i, n_col)
        q_feature = mri_adj.isel(cad_feature=i).values
        plot.qqplot(
            q_norm, q_feature,
            ax=axs[row, col],
            xlabel='Normal Q',
            ylabel=str(mri_adj['cad_feature'].values[i]) + " Q",
            title=""
        )
    fig.tight_layout()
```

### PCA ###

```{python fit-pca-adj}
pca_adj = sklearn.decomposition.PCA()
pca_adj.fit((mri_adj / mri_adj.std('case')).values)
```

```{python pca-adj-ev}
total_var = np.sum(pca.explained_variance_)
with plot.subplots(3, 1, sharex=True) as (fig, axs):
    axs[0].plot(
        range(1, len(pca_adj.explained_variance_)+1),
        np.cumsum(pca_adj.explained_variance_) / total_var
    )
    axs[0].set_ylabel("Total\nExplained Variance")
    axs[1].plot(
        range(1, len(pca_adj.explained_variance_)+1),
        pca_adj.explained_variance_ / total_var
    )
    axs[1].set_ylabel("Explained Variance")
    axs[2].plot(
        range(2, len(pca_adj.explained_variance_)+1),
        abs(pca_adj.explained_variance_[1:] -
            pca_adj.explained_variance_[:-1]) /
        total_var,
    )
    axs[2].set_xlabel("PC")
    axs[2].set_ylabel("Delta\nExplained Variance")
n_components = 10
```


```{python heatmap-pca-adj}
plot.heatmap(
    pca_adj.components_[:n_components, :].T,
    xticklabels=[str(i+1) for i in range(n_components)],
    yticklabels=mri_adj.cad_feature.values,
)
```

```{python plot-pca-adj-a}
with plot.subplots(1, 1, figsize=(7, 7)) as (fig, ax):
    ax.set_xlim(-1, 1)
    ax.set_ylim(-1, 1)
    for i in range(pca_adj.components_.shape[1]):
        ax.arrow(0, 0, pca_adj.components_[0, i], pca_adj.components_[1, i])
        alength = sqrt(pca_adj.components_[0, i]**2 +
                       pca_adj.components_[1, i]**2)
        if alength > 0.25:
            ax.text(pca_adj.components_[0, i], pca_adj.components_[1, i],
                    mri_adj['cad_feature'].values[i])
```


### Varimax ###

```{python fit-pca-adj-varimax}
coeff_varimax, _ = factor_rotation.rotate_factors(
    pca_adj.components_[:n_components, :].T,
    'varimax',
)
coeff_varimax = coeff_varimax.T
```

```{python heatmap-pca-adj-varimax}
plot.heatmap(
    coeff_varimax.T,
    xticklabels=[str(i+1) for i in range(coeff_varimax.shape[0])],
    yticklabels=mri_adj.cad_feature.values,
)
```

```{python plot-pca-adj-varimax}
with plot.subplots(1, 1, figsize=(7, 7)) as (fig, ax):
    ax.set_xlim(-1, 1)
    ax.set_ylim(-1, 1)
    for i in range(coeff_varimax.shape[1]):
        ax.arrow(0, 0, coeff_varimax[0, i], coeff_varimax[1, i])
        alength = sqrt(coeff_varimax[0, i]**2 +
                       coeff_varimax[1, i]**2)
        if alength > 0.25:
            ax.text(coeff_varimax[0, i], coeff_varimax[1, i],
                    mri_adj['cad_feature'].values[i])
```


### Quartimin ###


```{python fit-pca-adj-quartimin}
coeff_quartimin, _ = factor_rotation.rotate_factors(
    pca_adj.components_[:n_components, :].T,
    'quartimin',
)
coeff_quartimin = coeff_quartimin.T
```

```{python heatmap-pca-adj-quartimin}
plot.heatmap(
    coeff_quartimin.T,
    xticklabels=[str(i+1) for i in range(coeff_quartimin.shape[0])],
    yticklabels=mri_adj.cad_feature.values,
)
```

```{python plot-pca-adj-quartimin}
with plot.subplots(1, 1, figsize=(7, 7)) as (fig, ax):
    ax.set_xlim(-1, 1)
    ax.set_ylim(-1, 1)
    for i in range(coeff_quartimin.shape[1]):
        ax.arrow(0, 0, coeff_quartimin[0, i], coeff_quartimin[1, i])
        alength = sqrt(coeff_quartimin[0, i]**2 +
                       coeff_quartimin[1, i]**2)
        if alength > 0.25:
            ax.text(coeff_quartimin[0, i], coeff_quartimin[1, i],
                    mri_adj['cad_feature'].values[i])
```


### Quartimax ###


```{python fit-pca-adj-quartimax}
coeff_quartimax, _ = factor_rotation.rotate_factors(
    pca_adj.components_[:n_components, :].T,
    'quartimax',
)
coeff_quartimax = coeff_quartimax.T
```

```{python heatmap-pca-adj-quartimax}
plot.heatmap(
    coeff_quartimax.T,
    xticklabels=[str(i+1) for i in range(coeff_quartimax.shape[0])],
    yticklabels=mri_adj.cad_feature.values,
)
```

```{python plot-pca-adj-quartimax}
with plot.subplots(1, 1, figsize=(7, 7)) as (fig, ax):
    ax.set_xlim(-1, 1)
    ax.set_ylim(-1, 1)
    for i in range(coeff_quartimax.shape[1]):
        ax.arrow(0, 0, coeff_quartimax[0, i], coeff_quartimax[1, i])
        alength = sqrt(coeff_quartimax[0, i]**2 +
                       coeff_quartimax[1, i]**2)
        if alength > 0.25:
            ax.text(coeff_quartimax[0, i], coeff_quartimax[1, i],
                    mri_adj['cad_feature'].values[i])
```


### Equamax ###


```{python fit-pca-adj-equamax}
coeff_equamax, _ = factor_rotation.rotate_factors(
    pca_adj.components_[:n_components, :].T,
    'equamax',
)
coeff_equamax = coeff_equamax.T
```

```{python heatmap-pca-adj-equamax}
plot.heatmap(
    coeff_equamax.T,
    xticklabels=[str(i+1) for i in range(coeff_equamax.shape[0])],
    yticklabels=mri_adj.cad_feature.values,
)
```

```{python plot-pca-adj-equamax}
with plot.subplots(1, 1, figsize=(7, 7)) as (fig, ax):
    ax.set_xlim(-1, 1)
    ax.set_ylim(-1, 1)
    for i in range(coeff_equamax.shape[1]):
        ax.arrow(0, 0, coeff_equamax[0, i], coeff_equamax[1, i])
        alength = sqrt(coeff_equamax[0, i]**2 +
                       coeff_equamax[1, i]**2)
        if alength > 0.25:
            ax.text(coeff_equamax[0, i], coeff_equamax[1, i],
                    mri_adj['cad_feature'].values[i])
```
